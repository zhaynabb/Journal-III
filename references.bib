
@article{feng_detecting_2023,
	title = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}: {A} {Survey}},
	volume = {10},
	issn = {2329-9274},
	shorttitle = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}},
	doi = {10.1109/JAS.2022.105860},
	abstract = {Internet of things (IoT) devices make up 30\% of all network-connected endpoints, introducing vulnerabilities and novel attacks that make many companies as primary targets for cybercriminals. To address this increasing threat surface, every organization deploying IoT devices needs to consider security risks to ensure those devices are secure and trusted. Among all the solutions for security risks, firmware security analysis is essential to fix software bugs, patch vulnerabilities, or add new security features to protect users of those vulnerable devices. However, firmware security analysis has never been an easy job due to the diversity of the execution environment and the close source of firmware. These two distinct features complicate the operations to unpack firmware samples for detailed analysis. They also make it difficult to create visual environments to emulate the running of device firmware. Although researchers have developed many novel methods to overcome various challenges in the past decade, critical barriers impede firmware security analysis in practice. Therefore, this survey is motivated to systematically review and analyze the research challenges and their solutions, considering both breadth and depth. Specifically, based on the analysis perspectives, various methods that perform security analysis on IoT devices are introduced and classified into four categories. The challenges in each category are discussed in detail, and potential solutions are proposed subsequently. We then discuss the flaws of these solutions and provide future directions for this research field. This survey can be utilized by a broad range of readers, including software developers, cyber security researchers, and software security engineers, to better understand firmware security analysis.},
	number = {1},
	journal = {IEEE/CAA Journal of Automatica Sinica},
	author = {Feng, Xiaotao and Zhu, Xiaogang and Han, Qing-Long and Zhou, Wei and Wen, Sheng and Xiang, Yang},
	month = jan,
	year = {2023},
	note = {Conference Name: IEEE/CAA Journal of Automatica Sinica},
	keywords = {Codes, Embedded systems, Firmware emulation, Fuzzing, Internet of Things, Microprogramming, Security, Software, internet of things (IoT) firmware, network fuzzing, security, static analysis},
	pages = {25--41},
}

@article{feng_detecting_2023-1,
	title = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}: {A} {Survey}},
	volume = {10},
	issn = {2329-9274},
	shorttitle = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}},
	doi = {10.1109/JAS.2022.105860},
	abstract = {Internet of things (IoT) devices make up 30\% of all network-connected endpoints, introducing vulnerabilities and novel attacks that make many companies as primary targets for cybercriminals. To address this increasing threat surface, every organization deploying IoT devices needs to consider security risks to ensure those devices are secure and trusted. Among all the solutions for security risks, firmware security analysis is essential to fix software bugs, patch vulnerabilities, or add new security features to protect users of those vulnerable devices. However, firmware security analysis has never been an easy job due to the diversity of the execution environment and the close source of firmware. These two distinct features complicate the operations to unpack firmware samples for detailed analysis. They also make it difficult to create visual environments to emulate the running of device firmware. Although researchers have developed many novel methods to overcome various challenges in the past decade, critical barriers impede firmware security analysis in practice. Therefore, this survey is motivated to systematically review and analyze the research challenges and their solutions, considering both breadth and depth. Specifically, based on the analysis perspectives, various methods that perform security analysis on IoT devices are introduced and classified into four categories. The challenges in each category are discussed in detail, and potential solutions are proposed subsequently. We then discuss the flaws of these solutions and provide future directions for this research field. This survey can be utilized by a broad range of readers, including software developers, cyber security researchers, and software security engineers, to better understand firmware security analysis.},
	number = {1},
	journal = {IEEE/CAA Journal of Automatica Sinica},
	author = {Feng, Xiaotao and Zhu, Xiaogang and Han, Qing-Long and Zhou, Wei and Wen, Sheng and Xiang, Yang},
	month = jan,
	year = {2023},
	note = {Conference Name: IEEE/CAA Journal of Automatica Sinica},
	keywords = {Codes, Embedded systems, Firmware emulation, Fuzzing, Internet of Things, Microprogramming, Security, Software, internet of things (IoT) firmware, network fuzzing, security, static analysis},
	pages = {25--41},
}

@article{feng_detecting_2023-2,
	title = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}: {A} {Survey}},
	volume = {10},
	issn = {2329-9274},
	shorttitle = {Detecting {Vulnerability} on {IoT} {Device} {Firmware}},
	doi = {10.1109/JAS.2022.105860},
	abstract = {Internet of things (IoT) devices make up 30\% of all network-connected endpoints, introducing vulnerabilities and novel attacks that make many companies as primary targets for cybercriminals. To address this increasing threat surface, every organization deploying IoT devices needs to consider security risks to ensure those devices are secure and trusted. Among all the solutions for security risks, firmware security analysis is essential to fix software bugs, patch vulnerabilities, or add new security features to protect users of those vulnerable devices. However, firmware security analysis has never been an easy job due to the diversity of the execution environment and the close source of firmware. These two distinct features complicate the operations to unpack firmware samples for detailed analysis. They also make it difficult to create visual environments to emulate the running of device firmware. Although researchers have developed many novel methods to overcome various challenges in the past decade, critical barriers impede firmware security analysis in practice. Therefore, this survey is motivated to systematically review and analyze the research challenges and their solutions, considering both breadth and depth. Specifically, based on the analysis perspectives, various methods that perform security analysis on IoT devices are introduced and classified into four categories. The challenges in each category are discussed in detail, and potential solutions are proposed subsequently. We then discuss the flaws of these solutions and provide future directions for this research field. This survey can be utilized by a broad range of readers, including software developers, cyber security researchers, and software security engineers, to better understand firmware security analysis.},
	number = {1},
	journal = {IEEE/CAA Journal of Automatica Sinica},
	author = {Feng, Xiaotao and Zhu, Xiaogang and Han, Qing-Long and Zhou, Wei and Wen, Sheng and Xiang, Yang},
	month = jan,
	year = {2023},
	note = {Conference Name: IEEE/CAA Journal of Automatica Sinica},
	keywords = {Codes, Embedded systems, Firmware emulation, Fuzzing, Internet of Things, Microprogramming, Security, Software, internet of things (IoT) firmware, network fuzzing, security, static analysis},
	pages = {25--41},
}

@article{qasem_automatic_2021,
	title = {Automatic {Vulnerability} {Detection} in {Embedded} {Devices} and {Firmware}: {Survey} and {Layered} {Taxonomies}},
	volume = {54},
	issn = {0360-0300},
	shorttitle = {Automatic {Vulnerability} {Detection} in {Embedded} {Devices} and {Firmware}},
	url = {https://dl.acm.org/doi/10.1145/3432893},
	doi = {10.1145/3432893},
	abstract = {In the era of the internet of things (IoT), software-enabled inter-connected devices are of paramount importance. The embedded systems are very frequently used in both security and privacy-sensitive applications. However, the underlying software (a.k.a. firmware) very often suffers from a wide range of security vulnerabilities, mainly due to their outdated systems or reusing existing vulnerable libraries; which is evident by the surprising rise in the number of attacks against embedded systems. Therefore, to protect those embedded systems, detecting the presence of vulnerabilities in the large pool of embedded devices and their firmware plays a vital role. To this end, there exist several approaches to identify and trigger potential vulnerabilities within deployed embedded systems firmware. In this survey, we provide a comprehensive review of the state-of-the-art proposals, which detect vulnerabilities in embedded systems and firmware images by employing various analysis techniques, including static analysis, dynamic analysis, symbolic execution, and hybrid approaches. Furthermore, we perform both quantitative and qualitative comparisons among the surveyed approaches. Moreover, we devise taxonomies based on the applications of those approaches, the features used in the literature, and the type of the analysis. Finally, we identify the unresolved challenges and discuss possible future directions in this field of research.},
	number = {2},
	urldate = {2023-09-11},
	journal = {ACM Computing Surveys},
	author = {Qasem, Abdullah and Shirani, Paria and Debbabi, Mourad and Wang, Lingyu and Lebel, Bernard and Agba, Basile L.},
	month = mar,
	year = {2021},
	keywords = {Binary code analysis, embedded device security, firmware analysis, internet of things (IoT), vulnerability detection},
	pages = {25:1--25:42},
}

@inproceedings{zhang_firmware_2020,
	address = {Singapore Singapore},
	title = {Firmware {Fuzzing}: {The} {State} of the {Art}},
	isbn = {978-1-4503-8819-1},
	shorttitle = {Firmware {Fuzzing}},
	url = {https://dl.acm.org/doi/10.1145/3457913.3457934},
	doi = {10.1145/3457913.3457934},
	language = {en},
	urldate = {2023-09-07},
	booktitle = {12th {Asia}-{Pacific} {Symposium} on {Internetware}},
	publisher = {ACM},
	author = {Zhang, Chi and Wang, Yu and Wang, Linzhang},
	month = nov,
	year = {2020},
	pages = {110--115},
}

@article{nadir_taxonomy_2022,
	title = {A taxonomy of {IoT} firmware security and principal firmware analysis techniques},
	volume = {38},
	issn = {1874-5482},
	url = {https://www.sciencedirect.com/science/article/pii/S1874548222000373},
	doi = {10.1016/j.ijcip.2022.100552},
	abstract = {Internet of Things (IoT) has come a long way since its inception. However, the standardization process in IoT systems for a secure IoT solution is still in its early days. Numerous quality review articles have been contributed by researchers on existing frameworks, architectures, as well as the threats to IoT on different layers. However, most of the existing work neglects the security aspects of firmware in the IoT ecosystem. As such, there is a lack of comprehensive survey on IoT firmware security that highlights critical reasons for firmware insecurity in IoT, lists vulnerabilities, and perform an in-depth review of the principal analysis techniques. This article aims to fill that gap by delivering, to the best of our knowledge, the first comprehensive review article of the firmware (in)security of IoT devices. Starting by highlighting the importance of firmware security, this research work recognizes critical reasons behind the insecurity of firmware by discussing technical, commercial, standardization, and researching aspects. In particular, the scope, evolution, and internals of IoT firmware along with their security implications are discussed. Furthermore, a taxonomic classification of IoT firmware vulnerabilities has been presented. We also discuss complications that hinder the detection of firmware vulnerabilities before doing a detailed analysis of existing vulnerability assessment tools and techniques. A comparative analysis of the principal analysis techniques is provided in terms of the vulnerabilities they discover, the methodology they employ, and the platform and/or architectures they support. Towards the end, some key research issues have been identified to encourage and facilitate research in the firmware security domain of IoT. Finally, some recommendations have been provided for the IoT device vendors, developers, and integrators.},
	urldate = {2023-09-07},
	journal = {International Journal of Critical Infrastructure Protection},
	author = {Nadir, Ibrahim and Mahmood, Haroon and Asadullah, Ghalib},
	month = sep,
	year = {2022},
	keywords = {Firmware analysis, Firmware reverse-engineering, Firmware security, IoT, IoT firmware, IoT security},
	pages = {100552},
}

@article{balto_hybrid_2023,
	title = {Hybrid {IoT} {Cyber} {Range}},
	volume = {23},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1424-8220},
	url = {https://www.mdpi.com/1424-8220/23/6/3071},
	doi = {10.3390/s23063071},
	abstract = {The use of IoT devices has increased rapidly in recent times. While the development of new devices is moving quickly, and as prices are being forced down, the costs of developing such devices also needs to be reduced. IoT devices are now trusted with more critical tasks, and it is important that they behave as intended and that the information they process is protected. It is not always the IoT device itself that is the target of a cyber attack, but rather, it can be a tool for another attack. Home consumers, in particular, expect these devices to be easy to use and set up. However, to reduce costs, complexity, and time, security measures are often cut down. To increase awareness and knowledge in IoT security, education, awareness, demonstrations, and training are necessary. Small changes may result in significant security benefits. With increased awareness and knowledge among developers, manufacturers, and users, they can make choices that can improve security. To increase knowledge and awareness in IoT security, a proposed solution is a training ground for IoT security, an IoT cyber range. Cyber ranges have received more attention lately, but not as much in the IoT field, at least not what is publicly available. As the diversity in IoT devices is large with different vendors, architectures, and components and peripherals, it is difficult to find one solution that fits all IoT devices. To some extent, IoT devices can be emulated, but it is not feasible to create emulators for all types of devices. To cover all needs, it is necessary to combine digital emulation with real hardware. A cyber range with this combination is called a hybrid cyber range. This work surveys the requirements for a hybrid IoT cyber range and proposes a design and implementation of a range that fulfills those requirements.},
	language = {en},
	number = {6},
	urldate = {2023-09-07},
	journal = {Sensors},
	author = {Balto, Karl Edvard and Yamin, Muhammad Mudassar and Shalaginov, Andrii and Katt, Basel},
	month = jan,
	year = {2023},
	note = {Number: 6
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {IoT, cyber range, security},
	pages = {3071},
}

@inproceedings{bulekov_morphuzz_2022,
	title = {Morphuzz: {Bending} ({Input}) {Space} to {Fuzz} {Virtual} {Devices}},
	isbn = {978-1-939133-31-1},
	shorttitle = {Morphuzz},
	url = {https://www.usenix.org/conference/usenixsecurity22/presentation/bulekov},
	language = {en},
	urldate = {2023-09-03},
	author = {Bulekov, Alexander and Das, Bandan and Hajnoczi, Stefan and Egele, Manuel},
	year = {2022},
	keywords = {to be scanned},
	pages = {1221--1238},
}

@inproceedings{khan_helping_2021,
	title = {Helping {Users} {Automatically} {Find} and {Manage} {Sensitive}, {Expendable} {Files} in {Cloud} {Storage}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/khan-mohammad},
	language = {en},
	urldate = {2023-08-31},
	author = {Khan, Mohammad Taha and Tran, Christopher and Singh, Shubham and Vasilkov, Dimitri and Kanich, Chris and Ur, Blase and Zheleva, Elena},
	year = {2021},
	pages = {1145--1162},
}

@inproceedings{silva_compromised_2021,
	title = {Compromised or \{{Attacker}-{Owned}\}: {A} {Large} {Scale} {Classification} and {Study} of {Hosting} {Domains} of {Malicious} \{{URLs}\}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Compromised or \{{Attacker}-{Owned}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/desilva},
	language = {en},
	urldate = {2023-08-31},
	author = {Silva, Ravindu De and Nabeel, Mohamed and Elvitigala, Charith and Khalil, Issa and Yu, Ting and Keppitiyagama, Chamath},
	year = {2021},
	pages = {3721--3738},
}

@inproceedings{lovisotto_slap_2021,
	title = {\{{SLAP}\}: {Improving} {Physical} {Adversarial} {Examples} with \{{Short}-{Lived}\} {Adversarial} {Perturbations}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{SLAP}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lovisotto},
	language = {en},
	urldate = {2023-08-31},
	author = {Lovisotto, Giulio and Turner, Henry and Sluganovic, Ivo and Strohmeier, Martin and Martinovic, Ivan},
	year = {2021},
	pages = {1865--1882},
}

@inproceedings{hu_how_2021,
	title = {How to {Make} {Private} {Distributed} {Cardinality} {Estimation} {Practical}, and {Get} {Differential} {Privacy} for {Free}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/hu-changhui},
	language = {en},
	urldate = {2023-08-31},
	author = {Hu, Changhui and Li, Jin and Liu, Zheli and Guo, Xiaojie and Wei, Yu and Guang, Xuan and Loukides, Grigorios and Dong, Changyu},
	year = {2021},
	pages = {965--982},
}

@inproceedings{cao_data_2021,
	title = {Data {Poisoning} {Attacks} to {Local} {Differential} {Privacy} {Protocols}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/cao-xiaoyu},
	language = {en},
	urldate = {2023-08-31},
	author = {Cao, Xiaoyu and Jia, Jinyuan and Gong, Neil Zhenqiang},
	year = {2021},
	pages = {947--964},
}

@inproceedings{ujcich_causal_2021,
	title = {Causal {Analysis} for \{{Software}-{Defined}\} {Networking} {Attacks}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/ujcich},
	language = {en},
	urldate = {2023-08-31},
	author = {Ujcich, Benjamin E. and Jero, Samuel and Skowyra, Richard and Bates, Adam and Sanders, William H. and Okhravi, Hamed},
	year = {2021},
	pages = {3183--3200},
}

@inproceedings{bai_static_2021,
	title = {Static {Detection} of {Unsafe} \{{DMA}\} {Accesses} in {Device} {Drivers}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/bai},
	language = {en},
	urldate = {2023-08-31},
	author = {Bai, Jia-Ju and Li, Tuo and Lu, Kangjie and Hu, Shi-Min},
	year = {2021},
	keywords = {to be scanned},
	pages = {1629--1645},
}

@inproceedings{onaolapo_socialheisting_2021,
	title = {\{{SocialHEISTing}\}: {Understanding} {Stolen} {Facebook} {Accounts}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{SocialHEISTing}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/onaolapo},
	language = {en},
	urldate = {2023-08-31},
	author = {Onaolapo, Jeremiah and Leontiadis, Nektarios and Magka, Despoina and Stringhini, Gianluca},
	year = {2021},
	pages = {4115--4132},
}

@inproceedings{meijer_wheres_2021,
	title = {Where's {Crypto}?: {Automated} {Identification} and {Classification} of {Proprietary} {Cryptographic} {Primitives} in {Binary} {Code}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Where's {Crypto}?},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/meijer},
	language = {en},
	urldate = {2023-08-31},
	author = {Meijer, Carlo and Moonsamy, Veelasha and Wetzels, Jos},
	year = {2021},
	pages = {555--572},
}

@inproceedings{jeitner_injection_2021,
	title = {Injection {Attacks} {Reloaded}: {Tunnelling} {Malicious} {Payloads} over \{{DNS}\}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Injection {Attacks} {Reloaded}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/jeitner},
	language = {en},
	urldate = {2023-08-31},
	author = {Jeitner, Philipp and Shulman, Haya},
	year = {2021},
	pages = {3165--3182},
}

@inproceedings{lee_adcube_2021,
	title = {\{{AdCube}\}: \{{WebVR}\} {Ad} {Fraud} and {Practical} {Confinement} of \{{Third}-{Party}\} {Ads}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{AdCube}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lee-hyunjoo},
	language = {en},
	urldate = {2023-08-31},
	author = {Lee, Hyunjoo and Lee, Jiyeon and Kim, Daejun and Jana, Suman and Shin, Insik and Son, Sooel},
	year = {2021},
	pages = {2543--2560},
}

@inproceedings{lin_phishpedia_2021,
	title = {Phishpedia: {A} {Hybrid} {Deep} {Learning} {Based} {Approach} to {Visually} {Identify} {Phishing} {Webpages}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Phishpedia},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lin},
	language = {en},
	urldate = {2023-08-31},
	author = {Lin, Yun and Liu, Ruofan and Divakaran, Dinil Mon and Ng, Jun Yang and Chan, Qing Zhou and Lu, Yiwen and Si, Yuxuan and Zhang, Fan and Dong, Jin Song},
	year = {2021},
	pages = {3793--3810},
}

@inproceedings{pfeffer_usability_2021,
	title = {On the {Usability} of {Authenticity} {Checks} for {Hardware} {Security} {Tokens}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/pfeffer},
	language = {en},
	urldate = {2023-08-31},
	author = {Pfeffer, Katharina and Mai, Alexandra and Dabrowski, Adrian and Gusenbauer, Matthias and Schindler, Philipp and Weippl, Edgar and Franz, Michael and Krombholz, Katharina},
	year = {2021},
	pages = {37--54},
}

@inproceedings{khodayari_jaw_2021,
	title = {\{{JAW}\}: {Studying} {Client}-side \{{CSRF}\} with {Hybrid} {Property} {Graphs} and {Declarative} {Traversals}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{JAW}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/khodayari},
	language = {en},
	urldate = {2023-08-31},
	author = {Khodayari, Soheil and Pellegrino, Giancarlo},
	year = {2021},
	pages = {2525--2542},
}

@inproceedings{liu_jaqen_2021,
	title = {Jaqen: {A} \{{High}-{Performance}\} \{{Switch}-{Native}\} {Approach} for {Detecting} and {Mitigating} {Volumetric} \{{DDoS}\} {Attacks} with {Programmable} {Switches}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Jaqen},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/liu-zaoxing},
	language = {en},
	urldate = {2023-08-31},
	author = {Liu, Zaoxing and Namkung, Hun and Nikolaidis, Georgios and Lee, Jeongkeun and Kim, Changhoon and Jin, Xin and Braverman, Vladimir and Yu, Minlan and Sekar, Vyas},
	year = {2021},
	pages = {3829--3846},
}

@inproceedings{tolley_blind_2021,
	title = {Blind \{{In}/{On}-{Path}\} {Attacks} and {Applications} to \{{VPNs}\}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/tolley},
	language = {en},
	urldate = {2023-08-31},
	author = {Tolley, William J. and Kujath, Beau and Khan, Mohammad Taha and Vallina-Rodriguez, Narseo and Crandall, Jedidiah R.},
	year = {2021},
	pages = {3129--3146},
}

@inproceedings{chen_clarion_2021,
	title = {\{{CLARION}\}: {Sound} and {Clear} {Provenance} {Tracking} for {Microservice} {Deployments}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{CLARION}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/chen-xutong},
	language = {en},
	urldate = {2023-08-31},
	author = {Chen, Xutong and Irshad, Hassaan and Chen, Yan and Gehani, Ashish and Yegneswaran, Vinod},
	year = {2021},
	pages = {3989--4006},
}

@inproceedings{groza_canary_2021,
	title = {\{{CANARY}\} - a reactive defense mechanism for {Controller} {Area} {Networks} based on {Active} \{{RelaYs}\}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/groza},
	language = {en},
	urldate = {2023-08-31},
	author = {Groza, Bogdan and Popa, Lucian and Murvay, Pal-Stefan and Elovici, Yuval and Shabtai, Asaf},
	year = {2021},
	pages = {4259--4276},
}

@inproceedings{lee_exprace_2021,
	title = {\{{ExpRace}\}: {Exploiting} {Kernel} {Races} through {Raising} {Interrupts}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{ExpRace}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lee-yoochan},
	language = {en},
	urldate = {2023-08-31},
	author = {Lee, Yoochan and Min, Changwoo and Lee, Byoungyoung},
	year = {2021},
	pages = {2363--2380},
}

@inproceedings{han_does_2021,
	title = {Does logic locking work with \{{EDA}\} tools?},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/han-zhaokun},
	language = {en},
	urldate = {2023-08-31},
	author = {Han, Zhaokun and Yasin, Muhammad and Rajendran, Jeyavijayan (JV)},
	year = {2021},
	pages = {1055--1072},
}

@inproceedings{ferguson-walter_examining_2021,
	title = {Examining the {Efficacy} of {Decoy}-based and {Psychological} {Cyber} {Deception}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/ferguson-walter},
	language = {en},
	urldate = {2023-08-31},
	author = {Ferguson-Walter, Kimberly J. and Major, Maxine M. and Johnson, Chelsea K. and Muhleman, Daniel H.},
	year = {2021},
	pages = {1127--1144},
}

@inproceedings{gaddam_reducing_2021,
	title = {Reducing \{{HSM}\} {Reliance} in {Payments} through {Proxy} \{{Re}-{Encryption}\}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/gaddam},
	language = {en},
	urldate = {2023-08-31},
	author = {Gaddam, Sivanarayana and Luykx, Atul and Sinha, Rohit and Watson, Gaven},
	year = {2021},
	pages = {4061--4078},
}

@inproceedings{zhou_automatic_2021,
	title = {Automatic {Firmware} {Emulation} through {Invalidity}-guided {Knowledge} {Inference}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/zhou},
	language = {en},
	urldate = {2023-08-31},
	author = {Zhou, Wei and Guan, Le and Liu, Peng and Zhang, Yuqing},
	year = {2021},
	keywords = {to be scanned},
	pages = {2007--2024},
}

@inproceedings{paccagnella_lord_2021,
	title = {Lord of the {Ring}(s): {Side} {Channel} {Attacks} on the \{{CPU}\} \{{On}-{Chip}\} {Ring} {Interconnect} {Are} {Practical}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Lord of the {Ring}(s)},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/paccagnella},
	language = {en},
	urldate = {2023-08-31},
	author = {Paccagnella, Riccardo and Luo, Licheng and Fletcher, Christopher W.},
	year = {2021},
	pages = {645--662},
}

@inproceedings{nasr_defeating_2021,
	title = {Defeating \{{DNN}-{Based}\} {Traffic} {Analysis} {Systems} in \{{Real}-{Time}\} {With} {Blind} {Adversarial} {Perturbations}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/nasr},
	language = {en},
	urldate = {2023-08-31},
	author = {Nasr, Milad and Bahramali, Alireza and Houmansadr, Amir},
	year = {2021},
	pages = {2705--2722},
}

@inproceedings{aafer_android_2021,
	title = {Android \{{SmartTVs}\} {Vulnerability} {Discovery} via \{{Log}-{Guided}\} {Fuzzing}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/aafer},
	language = {en},
	urldate = {2023-08-31},
	author = {Aafer, Yousra and You, Wei and Sun, Yi and Shi, Yu and Zhang, Xiangyu and Yin, Heng},
	year = {2021},
	pages = {2759--2776},
}

@inproceedings{fei_seal_2021,
	title = {\{{SEAL}\}: {Storage}-efficient {Causality} {Analysis} on {Enterprise} {Logs} with {Query}-friendly {Compression}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{SEAL}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/fei},
	language = {en},
	urldate = {2023-08-31},
	author = {Fei, Peng and Li, Zhou and Wang, Zhiying and Yu, Xiao and Li, Ding and Jee, Kangkook},
	year = {2021},
	pages = {2987--3004},
}

@inproceedings{basin_card_2021,
	title = {Card {Brand} {Mixup} {Attack}: {Bypassing} the \{{PIN}\} in \{non-{Visa}\} {Cards} by {Using} {Them} for {Visa} {Transactions}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Card {Brand} {Mixup} {Attack}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/basin},
	language = {en},
	urldate = {2023-08-31},
	author = {Basin, David and Sasse, Ralf and Toro-Pozo, Jorge},
	year = {2021},
	pages = {179--194},
}

@inproceedings{krachenfels_automatic_2021,
	title = {Automatic {Extraction} of {Secrets} from the {Transistor} {Jungle} using \{{Laser}-{Assisted}\} \{{Side}-{Channel}\} {Attacks}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/krachenfels},
	language = {en},
	urldate = {2023-08-31},
	author = {Krachenfels, Thilo and Kiyan, Tuba and Tajik, Shahin and Seifert, Jean-Pierre},
	year = {2021},
	pages = {627--644},
}

@inproceedings{lee_constraint-guided_2021,
	title = {Constraint-guided {Directed} {Greybox} {Fuzzing}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lee-gwangmu},
	language = {en},
	urldate = {2023-08-31},
	author = {Lee, Gwangmu and Shim, Woochul and Lee, Byoungyoung},
	year = {2021},
	keywords = {to be scanned},
	pages = {3559--3576},
}

@inproceedings{albartus_design_2021,
	title = {On the {Design} and {Misuse} of {Microcoded} ({Embedded}) {Processors} — {A} {Cautionary} {Note}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/albartus},
	language = {en},
	urldate = {2023-08-31},
	author = {Albartus, Nils and Nasenberg, Clemens and Stolz, Florian and Fyrbiak, Marc and Paar, Christof and Tessier, Russell},
	year = {2021},
	pages = {267--284},
}

@inproceedings{azizi_t-miner_2021,
	title = {\{{T}-{Miner}\}: {A} {Generative} {Approach} to {Defend} {Against} {Trojan} {Attacks} on \{{DNN}-based\} {Text} {Classification}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{T}-{Miner}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/azizi},
	language = {en},
	urldate = {2023-08-31},
	author = {Azizi, Ahmadreza and Tahmid, Ibrahim Asadullah and Waheed, Asim and Mangaokar, Neal and Pu, Jiameng and Javed, Mobin and Reddy, Chandan K. and Viswanath, Bimal},
	year = {2021},
	pages = {2255--2272},
}

@inproceedings{johnson_jetset_2021,
	title = {Jetset: {Targeted} {Firmware} {Rehosting} for {Embedded} {Systems}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Jetset},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/johnson},
	language = {en},
	urldate = {2023-08-31},
	author = {Johnson, Evan and Bland, Maxwell and Zhu, YiFei and Mason, Joshua and Checkoway, Stephen and Savage, Stefan and Levchenko, Kirill},
	year = {2021},
	keywords = {to be scanned},
	pages = {321--338},
}

@inproceedings{huaman_large-scale_2021,
	title = {A \{{Large}-{Scale}\} {Interview} {Study} on {Information} {Security} in and {Attacks} against {Small} and {Medium}-sized {Enterprises}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/huaman},
	language = {en},
	urldate = {2023-08-31},
	author = {Huaman, Nicolas and Skarczinski, Bennet von and Stransky, Christian and Wermke, Dominik and Acar, Yasemin and Dreißigacker, Arne and Fahl, Sascha},
	year = {2021},
	pages = {1235--1252},
}

@inproceedings{zheng_cerebro_2021,
	title = {Cerebro: {A} {Platform} for \{{Multi}-{Party}\} {Cryptographic} {Collaborative} {Learning}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Cerebro},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/zheng},
	language = {en},
	urldate = {2023-08-31},
	author = {Zheng, Wenting and Deng, Ryan and Chen, Weikeng and Popa, Raluca Ada and Panda, Aurojit and Stoica, Ion},
	year = {2021},
	pages = {2723--2740},
}

@inproceedings{severi_explanation-guided_2021,
	title = {\{{Explanation}-{Guided}\} {Backdoor} {Poisoning} {Attacks} {Against} {Malware} {Classifiers}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/severi},
	language = {en},
	urldate = {2023-08-31},
	author = {Severi, Giorgio and Meyer, Jim and Coull, Scott and Oprea, Alina},
	year = {2021},
	pages = {1487--1504},
}

@inproceedings{izhikevich_lzr_2021,
	title = {\{{LZR}\}: {Identifying} {Unexpected} {Internet} {Services}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{LZR}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/izhikevich},
	language = {en},
	urldate = {2023-08-31},
	author = {Izhikevich, Liz and Teixeira, Renata and Durumeric, Zakir},
	year = {2021},
	pages = {3111--3128},
}

@inproceedings{kim_pasan_2021,
	title = {\{{PASAN}\}: {Detecting} {Peripheral} {Access} {Concurrency} {Bugs} within \{{Bare}-{Metal}\} {Embedded} {Applications}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{PASAN}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/kim},
	language = {en},
	urldate = {2023-08-31},
	author = {Kim, Taegyu and Kumar, Vireshwar and Rhee, Junghwan and Chen, Jizhou and Kim, Kyungtae and Kim, Chung Hwan and Xu, Dongyan and Tian, Dave (Jing)},
	year = {2021},
	keywords = {to be scanned},
	pages = {249--266},
}

@inproceedings{mayer_now_2021,
	title = {"{Now} {I}'m a bit \{angry:\}" {Individuals}' {Awareness}, {Perception}, and {Responses} to {Data} {Breaches} that {Affected} {Them}},
	isbn = {978-1-939133-24-3},
	shorttitle = {"{Now} {I}'m a bit \{\vphantom{\}}angry},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/mayer},
	language = {en},
	urldate = {2023-08-31},
	author = {Mayer, Peter and Zou, Yixin and Schaub, Florian and Aviv, Adam J.},
	year = {2021},
	pages = {393--410},
}

@inproceedings{mcdonald_its_2021,
	title = {"{It}'s stressful having all these phones": {Investigating} {Sex} {Workers}' {Safety} {Goals}, {Risks}, and {Practices} {Online}},
	isbn = {978-1-939133-24-3},
	shorttitle = {"{It}'s stressful having all these phones"},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/mcdonald},
	language = {en},
	urldate = {2023-08-31},
	author = {McDonald, Allison and Barwulor, Catherine and Mazurek, Michelle L. and Schaub, Florian and Redmiles, Elissa M.},
	year = {2021},
	pages = {375--392},
}

@inproceedings{song_systematic_2021,
	title = {Systematic {Evaluation} of {Privacy} {Risks} of {Machine} {Learning} {Models}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/song},
	language = {en},
	urldate = {2023-08-31},
	author = {Song, Liwei and Mittal, Prateek},
	year = {2021},
	pages = {2615--2632},
}

@inproceedings{khan_m2mon_2021,
	title = {\{{M2MON}\}: {Building} an \{{MMIO}-based\} {Security} {Reference} {Monitor} for {Unmanned} {Vehicles}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{M2MON}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/khan-arslan},
	language = {en},
	urldate = {2023-08-31},
	author = {Khan, Arslan and Kim, Hyungsub and Lee, Byoungyoung and Xu, Dongyan and Bianchi, Antonio and Tian, Dave (Jing)},
	year = {2021},
	keywords = {to be scanned},
	pages = {285--302},
}

@inproceedings{singh_i_2021,
	title = {I {Always} {Feel} {Like} {Somebody}'s {Sensing} {Me}! {A} {Framework} to {Detect}, {Identify}, and {Localize} {Clandestine} {Wireless} {Sensors}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/singh},
	language = {en},
	urldate = {2023-08-31},
	author = {Singh, Akash Deep and Garcia, Luis and Noor, Joseph and Srivastava, Mani},
	year = {2021},
	pages = {1829--1846},
}

@inproceedings{lehmkuhl_muse_2021,
	title = {Muse: {Secure} {Inference} {Resilient} to {Malicious} {Clients}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Muse},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lehmkuhl},
	language = {en},
	urldate = {2023-08-31},
	author = {Lehmkuhl, Ryan and Mishra, Pratyush and Srinivasan, Akshayaram and Popa, Raluca Ada},
	year = {2021},
	pages = {2201--2218},
}

@inproceedings{stute_disrupting_2021,
	title = {Disrupting {Continuity} of {Apple}'s {Wireless} {Ecosystem} {Security}: {New} {Tracking}, \{{DoS}\}, and \{{MitM}\} {Attacks} on \{{iOS}\} and \{{macOS}\} {Through} {Bluetooth} {Low} {Energy}, \{{AWDL}\}, and \{{Wi}-{Fi}\}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Disrupting {Continuity} of {Apple}'s {Wireless} {Ecosystem} {Security}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/stute},
	language = {en},
	urldate = {2023-08-31},
	author = {Stute, Milan and Heinrich, Alexander and Lorenz, Jannik and Hollick, Matthias},
	year = {2021},
	pages = {3917--3934},
}

@inproceedings{zhang_privsyn_2021,
	title = {\{{PrivSyn}\}: {Differentially} {Private} {Data} {Synthesis}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{PrivSyn}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/zhang-zhikun},
	language = {en},
	urldate = {2023-08-31},
	author = {Zhang, Zhikun and Wang, Tianhao and Li, Ninghui and Honorio, Jean and Backes, Michael and He, Shibo and Chen, Jiming and Zhang, Yang},
	year = {2021},
	pages = {929--946},
}

@inproceedings{wu_lightblue_2021,
	title = {\{{LIGHTBLUE}\}: {Automatic} \{{Profile}-{Aware}\} {Debloating} of {Bluetooth} {Stacks}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{LIGHTBLUE}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/wu-jianliang},
	language = {en},
	urldate = {2023-08-31},
	author = {Wu, Jianliang and Wu, Ruoyu and Antonioli, Daniele and Payer, Mathias and Tippenhauer, Nils Ole and Xu, Dongyan and Tian, Dave (Jing) and Bianchi, Antonio},
	year = {2021},
	pages = {339--356},
}

@inproceedings{akgul_evaluating_2021,
	title = {Evaluating \{{In}-{Workflow}\} {Messages} for {Improving} {Mental} {Models} of \{{End}-to-{End}\} {Encryption}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/akgul},
	language = {en},
	urldate = {2023-08-31},
	author = {Akgul, Omer and Bai, Wei and Das, Shruti and Mazurek, Michelle L.},
	year = {2021},
	pages = {447--464},
}

@inproceedings{yang_scalable_2021,
	title = {Scalable {Detection} of {Promotional} {Website} {Defacements} in {Black} {Hat} \{{SEO}\} {Campaigns}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/yang-ronghai},
	language = {en},
	urldate = {2023-08-31},
	author = {Yang, Ronghai and Wang, Xianbo and Chi, Cheng and Wang, Dawei and He, Jiawei and Pang, Siming and Lau, Wing Cheong},
	year = {2021},
	pages = {3703--3720},
}

@inproceedings{cheng_mid_2021,
	title = {\{{mID}\}: {Tracing} {Screen} {Photos} via \{{Moiré}\} {Patterns}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{mID}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/cheng-yushi},
	language = {en},
	urldate = {2023-08-31},
	author = {Cheng, Yushi and Ji, Xiaoyu and Wang, Lixu and Pang, Qi and Chen, Yi-Chao and Xu, Wenyuan},
	year = {2021},
	pages = {2969--2986},
}

@inproceedings{xiang_patchguard_2021,
	title = {\{{PatchGuard}\}: {A} {Provably} {Robust} {Defense} against {Adversarial} {Patches} via {Small} {Receptive} {Fields} and {Masking}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{PatchGuard}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/xiang},
	language = {en},
	urldate = {2023-08-31},
	author = {Xiang, Chong and Bhagoji, Arjun Nitin and Sehwag, Vikash and Mittal, Prateek},
	year = {2021},
	pages = {2237--2254},
}

@inproceedings{lee_polyscope_2021,
	title = {\{{PolyScope}\}: \{{Multi}-{Policy}\} {Access} {Control} {Analysis} to {Compute} {Authorized} {Attack} {Operations} in {Android} {Systems}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{PolyScope}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/lee-yu-tsung},
	language = {en},
	urldate = {2023-08-31},
	author = {Lee, Yu-Tsung and Enck, William and Chen, Haining and Vijayakumar, Hayawardh and Li, Ninghui and Qian, Zhiyun and Wang, Daimeng and Petracca, Giuseppe and Jaeger, Trent},
	year = {2021},
	pages = {2579--2596},
}

@inproceedings{yagemann_arcus_2021,
	title = {\{{ARCUS}\}: {Symbolic} {Root} {Cause} {Analysis} of {Exploits} in {Production} {Systems}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{ARCUS}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/yagemann},
	language = {en},
	urldate = {2023-08-31},
	author = {Yagemann, Carter and Pruett, Matthew and Chung, Simon P. and Bittick, Kennon and Saltaformaggio, Brendan and Lee, Wenke},
	year = {2021},
	pages = {1989--2006},
}

@inproceedings{li_automatic_2021,
	title = {Automatic {Policy} {Generation} for \{{Inter}-{Service}\} {Access} {Control} of {Microservices}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/li-xing},
	language = {en},
	urldate = {2023-08-31},
	author = {Li, Xing and Chen, Yan and Lin, Zhiqiang and Wang, Xiao and Chen, Jim Hao},
	year = {2021},
	pages = {3971--3988},
}

@inproceedings{wei_domain_2021,
	title = {Domain {Shadowing}: {Leveraging} {Content} {Delivery} {Networks} for {Robust} \{{Blocking}-{Resistant}\} {Communications}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Domain {Shadowing}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/wei},
	language = {en},
	urldate = {2023-08-31},
	author = {Wei, Mingkui},
	year = {2021},
	pages = {3327--3343},
}

@inproceedings{theofanos_passwords_2021,
	title = {'{Passwords} {Keep} {Me} {Safe}' – {Understanding} {What} {Children} {Think} about {Passwords}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/theofanos},
	language = {en},
	urldate = {2023-08-31},
	author = {Theofanos, Mary and Choong, Yee-Yin and Murphy, Olivia},
	year = {2021},
	pages = {19--35},
}

@inproceedings{xiao_abusing_2021,
	title = {Abusing {Hidden} {Properties} to {Attack} the {Node}.js {Ecosystem}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/xiao},
	language = {en},
	urldate = {2023-08-31},
	author = {Xiao, Feng and Huang, Jianwei and Xiong, Yichang and Yang, Guangliang and Hu, Hong and Gu, Guofei and Lee, Wenke},
	year = {2021},
	pages = {2951--2968},
}

@inproceedings{guo_effect_2021,
	title = {Effect of {Mood}, {Location}, {Trust}, and {Presence} of {Others} on \{{Video}-{Based}\} {Social} {Authentication}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/guo},
	language = {en},
	urldate = {2023-08-31},
	author = {Guo, Cheng and Campbell, Brianne and Kapadia, Apu and Reiter, Michael K. and Caine, Kelly},
	year = {2021},
	pages = {1--18},
}

@inproceedings{cheng_obfuscation-resilient_2021,
	title = {\{{Obfuscation}-{Resilient}\} {Executable} {Payload} {Extraction} {From} {Packed} {Malware}},
	isbn = {978-1-939133-24-3},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/cheng-binlin},
	language = {en},
	urldate = {2023-08-31},
	author = {Cheng, Binlin and Ming, Jiang and Leal, Erika A. and Zhang, Haotian and Fu, Jianming and Peng, Guojun and Marion, Jean-Yves},
	year = {2021},
	pages = {3451--3468},
}

@inproceedings{nakatsuka_cacti_2021,
	title = {\{{CACTI}\}: {Captcha} {Avoidance} via {Client}-side \{{TEE}\} {Integration}},
	isbn = {978-1-939133-24-3},
	shorttitle = {\{{CACTI}\}},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/nakatsuka},
	language = {en},
	urldate = {2023-08-31},
	author = {Nakatsuka, Yoshimichi and Ozturk, Ercan and Paverd, Andrew and Tsudik, Gene},
	year = {2021},
	pages = {2561--2578},
}

@mastersthesis{csonka_analysing_2022,
	title = {Analysing the {IOT} threat landscape using consumer firmware-based, high fidelity honeypots},
	abstract = {Deze thesis bestudeert de staat van het IoT bedreigingslandschap in 2021-2022. Eerst werd er een literatuurstudie over IoT veiligheid en IoT malware gemaakt. Daarna werd een honeypot ontworpen, gebouwd en publiek gemaakt gebaseerd op best practices om relevante gegevens te verzamelen. De honeypot bevat meerdere types van apparaten die meerdere IoT services bezitten en gebruikmaken van relevante netwerkprotocollen. Enkele van deze honeypot apparaten zijn zeer geloofwaardig. Dit is mogelijk gemaakt door middel van firmware re-hosting. Deze techniek virtualiseert delen van een apparaat. Verschillende implementaties werden bestudeerd om de meest toepasselijke te kunnen gebruiken. Deze techniek en de implementaties ervan zijn echter niet perfect. Analyse van de resulterende gegevens toont dat praktisch alle malware geautomatiseerd is door gelijkenissen tussen apparaten met Linux-gebasseerde firmware te misbruiken. Verder is alle gezamelde malware gebaseerd op Mirai of Gafgyt, twee oudere malware families. Firmware re-hosting benodigd verder onderzoek en ontwikkeling zodat het bruikbaar wordt om een honeypot mee te bouwen.},
	school = {tUL},
	author = {Csonka, Mihàly},
	year = {2022},
}

@article{zhou_automatic_2021-1,
	title = {Automatic {Firmware} {Emulation} through {Invalidity}-guided {Knowledge} {Inference}},
	abstract = {Emulating ﬁrmware for microcontrollers is challenging due to the tight coupling between the hardware and ﬁrmware. This has greatly impeded the application of dynamic analysis tools to ﬁrmware analysis. The state-of-the-art work automatically models unknown peripherals by observing their access patterns, and then leverages heuristics to calculate the appropriate responses when unknown peripheral registers are accessed. However, we empirically found that this approach and the corresponding heuristics are frequently insufﬁcient to emulate ﬁrmware. In this work, we propose a new approach called µEmu to emulate ﬁrmware with unknown peripherals. Unlike existing work that attempts to build a general model for each peripheral, our approach learns how to correctly emulate ﬁrmware execution at individual peripheral access points. It takes the image as input and symbolically executes it by representing unknown peripheral registers as symbols. During symbolic execution, it infers the rules to respond to unknown peripheral accesses. These rules are stored in a knowledge base, which is referred to during the dynamic ﬁrmware analysis. µEmu achieved a passing rate of 93\% in a set of unit tests for peripheral drivers without any manual assistance. We also evaluated µEmu with real-world ﬁrmware samples and new bugs were discovered.},
	language = {en},
	journal = {30th USENIX Security Symposium (USENIX Security 21)},
	author = {Zhou, Wei and Guan, Le and Liu, Peng and Zhang, Yuqing},
	year = {2021},
	pages = {2007--2024},
}

@inproceedings{redini_karonte_2020,
	title = {Karonte: {Detecting} {Insecure} {Multi}-binary {Interactions} in {Embedded} {Firmware}},
	shorttitle = {Karonte},
	doi = {10.1109/SP40000.2020.00036},
	abstract = {Low-power, single-purpose embedded devices (e.g., routers and IoT devices) have become ubiquitous. While they automate and simplify many aspects of users' lives, recent large-scale attacks have shown that their sheer number poses a severe threat to the Internet infrastructure. Unfortunately, the software on these systems is hardware-dependent, and typically executes in unique, minimal environments with non-standard configurations, making security analysis particularly challenging. Many of the existing devices implement their functionality through the use of multiple binaries. This multi-binary service implementation renders current static and dynamic analysis techniques either ineffective or inefficient, as they are unable to identify and adequately model the communication between the various executables. In this paper, we present Karonte, a static analysis approach capable of analyzing embedded-device firmware by modeling and tracking multi-binary interactions. Our approach propagates taint information between binaries to detect insecure interactions and identify vulnerabilities. We first evaluated Karonte on 53 firmware samples from various vendors, showing that our prototype tool can successfully track and constrain multi-binary interactions. This led to the discovery of 46 zero-day bugs. Then, we performed a large-scale experiment on 899 different samples, showing that Karonte scales well with firmware samples of different size and complexity.},
	booktitle = {2020 {IEEE} {Symposium} on {Security} and {Privacy} ({SP})},
	author = {Redini, Nilo and Machiry, Aravind and Wang, Ruoyu and Spensky, Chad and Continella, Andrea and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
	month = may,
	year = {2020},
	note = {ISSN: 2375-1207},
	keywords = {Computer bugs, Microprogramming, Prototypes, Security, Static analysis, Tools, Web servers},
	pages = {1544--1561},
}

@misc{kim_hd-fuzz_2023,
	address = {Rochester, NY},
	type = {{SSRN} {Scholarly} {Paper}},
	title = {Hd-{Fuzz}: {Hardware} {Dependency}-{Aware} {Firmware} {Fuzzing} {Via} {Hybrid} {Mmio} {Modeling}},
	shorttitle = {Hd-{Fuzz}},
	url = {https://papers.ssrn.com/abstract=4493040},
	doi = {10.2139/ssrn.4493040},
	abstract = {Numerous interconnected small embedded systems, such as Internet of Things (IoT) devices, are pervasive in our daily lives; however, their security lags behind. In particular, firmware vulnerabilities in low-level infrastructure have a more severe impact than application-level vulnerabilities. Fuzzing is the most effective technique for detecting vulnerabilities in firmware, but it encounters several challenges such as hardware-dependency, input channel, and instrumentation. Existing works attempt to overcome these challenges by combining firmware re-hosting and fuzzing. However, they only explore worthwhile paths based on heuristics and human assistance, which leaves many parts of the firmware’s functionality unreachable by fuzzing. In this work, we propose a novel hardware dependency-aware system named HD-FUZZ that combines low-level firmware re-hosting with fuzzing to explore all paths in the firmware and find bugs efficiently. The key ideas of HD-FUZZ are: 1) to propose a hybrid memory-mapped I/O (MMIO) modeling; 2) to achieve high efficiency by performing MMIO modeling through fuzzing for most cases; and 3) to achieve completeness by performing MMIO modeling through symbolic execution only to satisfy complex checks affecting the execution flow. HD-FUZZ has been extensively evaluated on both unit test cases and real-world targets, covering 12 hardware platforms and 67 firmware images. Compared to state-of-the-art works, HD-FUZZ achieves the highest passing rate in unit test benchmarks, reaches up to 2.62 times higher code coverage in fuzzing benchmarks, and generates initial access models up to 11.6 times faster. Notably, HD-FUZZ finds two new bugs, including ones in targets that were previously analyzed by other works.},
	language = {en},
	urldate = {2023-08-27},
	author = {Kim, Juhwan and Yu, Jihyeon and Lee, Youngwoo and Kim, Dan Dongseong and Yun, Joobeom},
	month = jun,
	year = {2023},
	keywords = {Firmware, Fuzzing, Internet of Things, Symbolic Execution, Vulnerability},
}

@inproceedings{ma_no_2023,
	address = {New York, NY, USA},
	series = {{MobiSys} '23},
	title = {No {More} {Companion} {Apps} {Hacking} but {One} {Dongle}: {Hub}-{Based} {Blackbox} {Fuzzing} of {IoT} {Firmware}},
	isbn = {9798400701108},
	shorttitle = {No {More} {Companion} {Apps} {Hacking} but {One} {Dongle}},
	url = {https://dl.acm.org/doi/10.1145/3581791.3596857},
	doi = {10.1145/3581791.3596857},
	abstract = {Given the massive difficulty in emulating IoT firmware, blackbox fuzzing of IoT devices for vulnerability discovery has become an attractive option. However, existing blackbox IoT fuzzers need much time and tedious effort to reverse engineer the IoT companion app (or manually collect test scripts) of each IoT device, which is unscalable when analyzing many devices. Moreover, fuzzing through a companion app is impeded by the input sanitization inside the app and limited to the manually revealed functions. We notice that IoT devices are typically able to connect a hub using standard wireless protocols (such as ZigBee, Z-Wave, and WiFi). We thus propose a uniform hub-based architecture for fuzzing various IoT devices, without reverse engineering any companion apps. It exploits the messages exchanged between a hub and an IoT device to automatically discover all the functions, and then launches systematic function-oriented message-semantics-guided fuzzing. It avoids sanitization imposed by a companion app. In addition, it conducts device state-sensitive fuzzing, which we find very effective in finding IoT bugs. We implement the system named HubFuzzer. The evaluation shows that HubFuzzer leads to much higher coverage than prior state of the art. We test 21 IoT devices and find 23 zero-day vulnerabilities. Four CVEs have been assigned.},
	urldate = {2023-08-27},
	booktitle = {Proceedings of the 21st {Annual} {International} {Conference} on {Mobile} {Systems}, {Applications} and {Services}},
	publisher = {Association for Computing Machinery},
	author = {Ma, Xiaoyue and Zeng, Qiang and Chi, Haotian and Luo, Lannan},
	month = jun,
	year = {2023},
	keywords = {IoT security, fuzzing, vulnerability discovery},
	pages = {205--218},
}

@inproceedings{zhou_what_2022,
	address = {New York, NY, USA},
	series = {{CCS} '22},
	title = {What {Your} {Firmware} {Tells} {You} {Is} {Not} {How} {You} {Should} {Emulate} {It}: {A} {Specification}-{Guided} {Approach} for {Firmware} {Emulation}},
	isbn = {978-1-4503-9450-5},
	shorttitle = {What {Your} {Firmware} {Tells} {You} {Is} {Not} {How} {You} {Should} {Emulate} {It}},
	url = {https://dl.acm.org/doi/10.1145/3548606.3559386},
	doi = {10.1145/3548606.3559386},
	abstract = {Emulating firmware of microcontrollers is challenging due to the lack of peripheral models. Existing work finds out how to respond to peripheral read operations by analyzing the target firmware. This is problematic because the firmware sometimes does not contain enough clues to support the emulation or even contains misleading information (e.g., a buggy firmware). In this work, we propose a new approach that builds peripheral models from the peripheral specification. Using NLP, we translate peripheral behaviors in human language (documented in chip manuals) into a set of structured condition-action rules. By checking, executing, and chaining them at run time, we can dynamically synthesize a peripheral model for each firmware execution. The extracted condition-action rules might not be complete or even be wrong. We, therefore, propose incorporating symbolic execution to quickly pinpoint the root cause. This assists us in the manual correction of the problematic rules. We have implemented our idea for five popular MCU boards spanning three different chip vendors. Using a new edit-distance-based algorithm to calculate trace differences, our evaluation against a large firmware corpus confirmed that our prototype achieves much higher fidelity compared with state-of-the-art solutions. Benefiting from the accurate emulation, our emulator effectively avoids false positives observed in existing fuzzing work. We also designed a new dynamic analysis method to perform driver code compliance checks against the specification. We found some non-compliance which we later confirmed to be bugs caused by race conditions.},
	urldate = {2023-08-27},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {Association for Computing Machinery},
	author = {Zhou, Wei and Zhang, Lan and Guan, Le and Liu, Peng and Zhang, Yuqing},
	month = nov,
	year = {2022},
	keywords = {firmware emulation, fuzzing, microcontroller, nlp},
	pages = {3269--3283},
}

@article{yun_fuzzing_2022,
	title = {Fuzzing of {Embedded} {Systems}: {A} {Survey}},
	volume = {55},
	issn = {0360-0300},
	shorttitle = {Fuzzing of {Embedded} {Systems}},
	url = {https://dl.acm.org/doi/10.1145/3538644},
	doi = {10.1145/3538644},
	abstract = {Security attacks abuse software vulnerabilities of IoT devices; hence, detecting and eliminating these vulnerabilities immediately are crucial. Fuzzing is an efficient method to identify vulnerabilities automatically, and many publications have been released to date. However, fuzzing for embedded systems has not been studied extensively owing to various obstacles, such as multi-architecture support, crash detection difficulties, and limited resources. Thus, the article introduces fuzzing techniques for embedded systems and the fuzzing differences for desktop and embedded systems. Further, we collect state-of-the-art technologies, discuss their advantages and disadvantages, and classify embedded system fuzzing tools. Finally, future directions for fuzzing research of embedded systems are predicted and discussed.},
	number = {7},
	urldate = {2023-08-27},
	journal = {ACM Computing Surveys},
	author = {Yun, Joobeom and Rustamov, Fayozbek and Kim, Juhwan and Shin, Youngjoo},
	month = dec,
	year = {2022},
	keywords = {Firmware fuzzing, IoT devices, concolic execution, embedded systems, firmware analysis, fuzzing, software testing, symbolic execution},
	pages = {137:1--137:33},
}

@inproceedings{srivastava_firmfuzz_2019,
	address = {New York, NY, USA},
	series = {{IoT} {S}\&amp;{P}'19},
	title = {{FirmFuzz}: {Automated} {IoT} {Firmware} {Introspection} and {Analysis}},
	isbn = {978-1-4503-6838-4},
	shorttitle = {{FirmFuzz}},
	url = {https://dl.acm.org/doi/10.1145/3338507.3358616},
	doi = {10.1145/3338507.3358616},
	abstract = {While the number of IoT devices grows at an exhilarating pace their security remains stagnant. Imposing secure coding standards across all vendors is infeasible. Testing individual devices allows an analyst to evaluate their security post deployment. Any discovered vulnerabilities can then be disclosed to the vendors in order to assist them in securing their products. The search for vulnerabilities should ideally be automated for efficiency and furthermore be device-independent for scalability. We present FirmFuzz, an automated device-independent emulation and dynamic analysis framework for Linux-based firmware images. It employs a greybox-based generational fuzzing approach coupled with static analysis and system introspection to provide targeted and deterministic bug discovery within a firmware image. We evaluate FirmFuzz by emulating and dynamically analyzing 32 images (from 27 unique devices) with a network accessible from the host performing the emulation. During testing, FirmFuzz discovered seven previously undisclosed vulnerabilities across six different devices: two IP cameras and four routers. So far, 4 CVE's have been assigned.},
	urldate = {2023-08-27},
	booktitle = {Proceedings of the 2nd {International} {ACM} {Workshop} on {Security} and {Privacy} for the {Internet}-of-{Things}},
	publisher = {Association for Computing Machinery},
	author = {Srivastava, Prashast and Peng, Hui and Li, Jiahao and Okhravi, Hamed and Shrobe, Howard and Payer, Mathias},
	month = nov,
	year = {2019},
	keywords = {dynamic analysis, firmware testing, fuzzing, iot, vulnerability analysis},
	pages = {15--21},
}

@inproceedings{johnson_jetset_2021-1,
	title = {Jetset: {Targeted} {Firmware} {Rehosting} for {Embedded} {Systems}},
	isbn = {978-1-939133-24-3},
	shorttitle = {Jetset},
	url = {https://www.usenix.org/conference/usenixsecurity21/presentation/johnson},
	language = {en},
	urldate = {2023-08-27},
	author = {Johnson, Evan and Bland, Maxwell and Zhu, YiFei and Mason, Joshua and Checkoway, Stephen and Savage, Stefan and Levchenko, Kirill},
	year = {2021},
	pages = {321--338},
}

@misc{noauthor_zotero_nodate,
	title = {Zotero {\textbar} {Your} personal research assistant},
	url = {https://www.zotero.org/},
	urldate = {2023-08-27},
}

@misc{noauthor_google_nodate,
	title = {Google {Scholar}},
	url = {https://scholar.google.com/schhp?hl=en},
	urldate = {2023-08-27},
}

@misc{noauthor_google_nodate-1,
	title = {Google {Scholar} - {Create} alert},
	url = {https://scholar.google.com/scholar_alerts?view_op=create_alert_options&alert_params=hl%3Den&hl=en},
	urldate = {2023-08-27},
}

@inproceedings{cao_device-agnostic_2020,
	address = {Austin USA},
	title = {Device-agnostic {Firmware} {Execution} is {Possible}: {A} {Concolic} {Execution} {Approach} for {Peripheral} {Emulation}},
	isbn = {978-1-4503-8858-0},
	shorttitle = {Device-agnostic {Firmware} {Execution} is {Possible}},
	url = {https://dl.acm.org/doi/10.1145/3427228.3427280},
	doi = {10.1145/3427228.3427280},
	abstract = {With the rapid proliferation of IoT devices, our cyberspace is nowadays dominated by billions of low-cost computing nodes, which are very heterogeneous to each other. Dynamic analysis, one of the most effective approaches to finding software bugs, has become paralyzed due to the lack of a generic emulator capable of running diverse previously-unseen firmware. In recent years, we have witnessed devastating security breaches targeting low-end microcontroller-based IoT devices. These security concerns have significantly hamstrung further evolution of the IoT technology. In this work, we present Laelaps, a device emulator specifically designed to run diverse software of microcontroller devices. We do not encode into our emulator any specific information about a device. Instead, Laelaps infers the expected behavior of firmware via symbolic-execution-assisted peripheral emulation and generates proper inputs to steer concrete execution on the fly. This unique design feature makes Laelaps capable of running diverse firmware with no a priori knowledge about the target device. To demonstrate the capabilities of Laelaps, we applied dynamic analysis techniques on top of our emulator. We successfully identified both self-injected and real-world vulnerabilities.},
	language = {en},
	urldate = {2023-02-23},
	booktitle = {Annual {Computer} {Security} {Applications} {Conference}},
	publisher = {ACM},
	author = {Cao, Chen and Guan, Le and Ming, Jiang and Liu, Peng},
	month = dec,
	year = {2020},
	pages = {746--759},
}

@inproceedings{spensky_conware_2021,
	address = {Virtual Event Hong Kong},
	title = {Conware: {Automated} {Modeling} of {Hardware} {Peripherals}},
	isbn = {978-1-4503-8287-8},
	shorttitle = {Conware},
	url = {https://dl.acm.org/doi/10.1145/3433210.3437532},
	doi = {10.1145/3433210.3437532},
	language = {en},
	urldate = {2023-02-21},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {ACM},
	author = {Spensky, Chad and Machiry, Aravind and Redini, Nilo and Unger, Colin and Foster, Graham and Blasband, Evan and Okhravi, Hamed and Kruegel, Christopher and Vigna, Giovanni},
	month = may,
	year = {2021},
	pages = {95--109},
}

@inproceedings{burrello_laelaps_2019,
	title = {Laelaps: {An} {Energy}-{Efficient} {Seizure} {Detection} {Algorithm} from {Long}-term {Human} {iEEG} {Recordings} without {False} {Alarms}},
	shorttitle = {Laelaps},
	doi = {10.23919/DATE.2019.8715186},
	abstract = {We propose Laelaps, an energy-efficient and fast learning algorithm with no false alarms for epileptic seizure detection from long-term intracranial electroencephalography (iEEG) signals. Laelaps uses end-to-end binary operations by exploiting symbolic dynamics and brain-inspired hyperdimensional computing. Laelaps's results surpass those yielded by state-of-the-art (SoA) methods [1], [2], [3], including deep learning, on a new very large dataset containing 116 seizures of 18 drug-resistant epilepsy patients in 2656 hours of recordings-each patient implanted with 24 to 128 iEEG electrodes. Laelaps trains 18 patient-specific models by using only 24 seizures: 12 models are trained with one seizure per patient, the others with two seizures. The trained models detect 79 out of 92 unseen seizures without any false alarms across all the patients as a big step forward in practical seizure detection. Importantly, a simple implementation of Laelaps on the Nvidia Tegra X2 embedded device achieves 1.7×-3.9× faster execution and 1.4×-2.9× lower energy consumption compared to the best result from the SoA methods. Our source code and anonymized iEEG dataset are freely available at http://ieeg-swez.ethz.ch.},
	booktitle = {2019 {Design}, {Automation} \& {Test} in {Europe} {Conference} \& {Exhibition} ({DATE})},
	author = {Burrello, Alessio and Cavigelli, Lukas and Schindler, Kaspar and Benini, Luca and Rahimi, Abbas},
	month = mar,
	year = {2019},
	note = {ISSN: 1558-1101},
	keywords = {Brain modeling, Electrodes, Electroencephalography, Epilepsy, Feature extraction, Heuristic algorithms, Hyperdimensional computing, Microsoft Windows, symbolic analysis},
	pages = {752--757},
}

@inproceedings{mera_dice_2021,
	title = {{DICE}: {Automatic} {Emulation} of {DMA} {Input} {Channels} for {Dynamic} {Firmware} {Analysis}},
	shorttitle = {{DICE}},
	doi = {10.1109/SP40001.2021.00018},
	abstract = {Microcontroller-based embedded devices are at the core of Internet-of-Things (IoT) and Cyber-Physical Systems (CPS). The security of these devices is of paramount importance. Among the approaches to securing embedded devices, dynamic firmware analysis (e.g., vulnerability detection) gained great attention lately, thanks to its offline nature and low false-positive rates. However, regardless of the analysis and emulation techniques used, existing dynamic firmware analyzers share a major limitation, namely the inability to handle firmware using DMA (Direct Memory Access). It severely limits the types of devices supported and firmware code coverage.We present DICE, a drop-in solution for firmware analyzers to emulate DMA input channels and generate or manipulate DMA inputs (from peripherals to firmware). DICE is designed to be hardware-independent (i.e., no actual peripherals or DMA controllers needed) and compatible with common MCU firmware (i.e., no firmware-specific DMA usages assumed) and embedded architectures. The high-level idea behind DICE is the identification and emulation of the abstract DMA input channels, rather than the highly diverse peripherals and controllers. DICE identifies DMA input channels as the firmware writes the source and destination DMA transfer pointers into the DMA controller. Then DICE manipulates the input transferred through DMA on behalf of the firmware analyzer. DICE does not require firmware source code or additional features from firmware analyzers.We integrated DICE to the recently proposed firmware analyzer P2IM (for ARM Cortex-M architecture) and a PIC32 emulator (for MIPS M4K/M-Class architecture). We evaluated it on 83 benchmarks and sample firmware, representing 9 different DMA controllers from 5 different vendors. DICE detected 33 out of 37 DMA input channels, with 0 false positives. It correctly supplied DMA inputs to 21 out of 22 DMA buffers that firmware actually use, which previous firmware analyzers cannot achieve due to the lack of DMA emulation. DICE’s overhead is fairly low, it adds 3.4\% on average to P2IM execution time. We also fuzz-tested 7 real-world firmware using DICE and compared the results with the original P2IM. DICE uncovered tremendously more execution paths (as much as 79X) and found 5 unique previously-unknown bugs that are unreachable without DMA emulation. All our source code and dataset are publicly available.},
	booktitle = {2021 {IEEE} {Symposium} on {Security} and {Privacy} ({SP})},
	author = {Mera, Alejandro and Feng, Bo and Lu, Long and Kirda, Engin},
	month = may,
	year = {2021},
	note = {ISSN: 2375-1207},
	keywords = {Benchmark testing, Computer bugs, Cyber-physical systems, DMA, Embedded-Systems, Emulation, Firmware-Testing, Fuzzing, Microcontrollers, Privacy, Runtime},
	pages = {1938--1954},
}

@article{feng_p2im_nodate,
	title = {{P2IM}: {Scalable} and {Hardware}-independent {Firmware} {Testing} via {Automatic} {Peripheral} {Interface} {Modeling}},
	abstract = {Dynamic testing or fuzzing of embedded ﬁrmware is severely limited by hardware-dependence and poor scalability, partly contributing to the widespread vulnerable IoT devices. We propose a software framework that continuously executes a given ﬁrmware binary while channeling inputs from an off-the-shelf fuzzer, enabling hardware-independent and scalable ﬁrmware testing. Our framework, using a novel technique called P2IM, abstracts diverse peripherals and handles ﬁrmware I/O on the ﬂy based on automatically generated models. P2IM is oblivious to peripheral designs and generic to ﬁrmware implementations, and therefore, applicable to a wide range of embedded devices. We evaluated our framework using 70 sample ﬁrmware and 10 ﬁrmware from real devices, including a drone, a robot, and a PLC. It successfully executed 79\% of the sample ﬁrmware without any manual assistance. We also performed a limited fuzzing test on the real ﬁrmware, which unveiled 7 unique unknown bugs.},
	language = {en},
	author = {Feng, Bo and Mera, Alejandro and Lu, Long},
}

@inproceedings{fortino_enabling_2022,
	title = {Enabling {Faster} {Security} {Assessment} of {Re}-hosted {Firmware}},
	doi = {10.1109/DASC/PiCom/CBDCom/Cy55231.2022.9927780},
	abstract = {The rapid growth of the number of IoT devices and their intrinsic correlation to everyone’s life poses critical security challenges. The security, safety and privacy are constantly under attack due to the huge number of easy-to-exploit vulnerabilities in these devices. It is straightforward to notice how a careful analysis of IoT devices is more topical and urgent than ever and it is important to adopt effective vulnerability assessment methodologies in order to identify and thwart many types of cyberattacks. In order to perform traditional analyses on the firmware, however, it is important to emulate the latter in a controlled environment: a process called firmware re-hosting. In this paper we discuss the limitations of the existing re-hosting approaches when dealing with vulnerability assessment and we propose a novel methodology to speed up security analyses and allow the application to firmware of traditional security tools, such as binary fuzzers.},
	booktitle = {2022 {IEEE} {Intl} {Conf} on {Dependable}, {Autonomic} and {Secure} {Computing}, {Intl} {Conf} on {Pervasive} {Intelligence} and {Computing}, {Intl} {Conf} on {Cloud} and {Big} {Data} {Computing}, {Intl} {Conf} on {Cyber} {Science} and {Technology} {Congress} ({DASC}/{PiCom}/{CBDCom}/{CyberSciTech})},
	author = {Fortino, Giancarlo and Greco, Claudia and Guzzo, Antonella and Ianni, Michele},
	month = sep,
	year = {2022},
	keywords = {Correlation, Internet of Things, Performance evaluation, Privacy, Process control, Safety, Security, binary rewriting, firmware re-hosting, fuzzing, vulnerability assessment},
	pages = {1--6},
}

@article{eisele_embedded_2022,
	title = {Embedded fuzzing: a review of challenges, tools, and solutions},
	volume = {5},
	issn = {2523-3246},
	shorttitle = {Embedded fuzzing},
	url = {https://doi.org/10.1186/s42400-022-00123-y},
	doi = {10.1186/s42400-022-00123-y},
	abstract = {Fuzzing has become one of the best-established methods to uncover software bugs. Meanwhile, the market of embedded systems, which binds the software execution tightly to the very hardware architecture, has grown at a steady pace, and that pace is anticipated to become yet more sustained in the near future. Embedded systems also benefit from fuzzing, but the innumerable existing architectures and hardware peripherals complicate the development of general and usable approaches, hence a plethora of tools have recently appeared. Here comes a stringent need for a systematic review in the area of fuzzing approaches for embedded systems, which we term “embedded fuzzing” for brevity. The inclusion criteria chosen in this article are semi-objective in their coverage of the most relevant publication venues as well as of our personal judgement. The review rests on a formal definition we develop to represent the realm of embedded fuzzing. It continues by discussing the approaches that satisfy the inclusion criteria, then defines the relevant elements of comparison and groups the approaches according to how the execution environment is served to the system under test. The resulting review produces a table with 42 entries, which in turn supports discussion suggesting vast room for future research due to the limitations noted.},
	language = {en},
	number = {1},
	urldate = {2023-02-21},
	journal = {Cybersecurity},
	author = {Eisele, Max and Maugeri, Marcello and Shriwas, Rachna and Huth, Christopher and Bella, Giampaolo},
	month = sep,
	year = {2022},
	pages = {18},
}

@article{csonka_analysing_nodate,
	title = {Analysing the {IOT} threat landscape using consumer firmware-based, high fidelity honeypots},
	language = {en},
	author = {Csonka, Mihàly},
}

@misc{xin_firmware_2021,
	title = {Firmware {Re}-hosting {Through} {Static} {Binary}-level {Porting}},
	url = {http://arxiv.org/abs/2107.09856},
	abstract = {The rapid growth of the Industrial Internet of Things (IIoT) has brought embedded systems into focus as major targets for both security analysts and malicious adversaries. Due to the non-standard hardware and diverse software, embedded devices present unique challenges to security analysts for the accurate analysis of firmware binaries. The diversity in hardware components and tight coupling between firmware and hardware makes it hard to perform dynamic analysis, which must have the ability to execute firmware code in virtualized environments. However, emulating the large expanse of hardware peripherals makes analysts have to frequently modify the emulator for executing various firmware code in different virtualized environments, greatly limiting the ability of security analysis. In this work, we explore the problem of firmware re-hosting related to the real-time operating system (RTOS). Specifically, developers create a Board Support Package (BSP) and develop device drivers to make that RTOS run on their platform. By providing high-level replacements for BSP routines and device drivers, we can make the minimal modification of the firmware that is to be migrated from its original hardware environment into a virtualized one. We show that an approach capable of offering the ability to execute firmware at scale through patching firmware in an automated manner without modifying the existing emulators. Our approach, called static binary-level porting, first identifies the BSP and device drivers in target firmware, then patches the firmware with pre-built BSP routines and drivers that can be adapted to the existing emulators. Finally, we demonstrate the practicality of the proposed method on multiple hardware platforms and firmware samples for security analysis. The result shows that the approach is flexible enough to emulate firmware for vulnerability assessment and exploits development.},
	urldate = {2023-02-21},
	publisher = {arXiv},
	author = {Xin, Mingfeng and Wen, Hui and Deng, Liting and Li, Hong and Li, Qiang and Sun, Limin},
	month = jul,
	year = {2021},
	note = {arXiv:2107.09856 [cs]},
	keywords = {Computer Science - Cryptography and Security},
}

@inproceedings{fasano_sok_2021,
	address = {Virtual Event Hong Kong},
	title = {{SoK}: {Enabling} {Security} {Analyses} of {Embedded} {Systems} via {Rehosting}},
	isbn = {978-1-4503-8287-8},
	shorttitle = {{SoK}},
	url = {https://dl.acm.org/doi/10.1145/3433210.3453093},
	doi = {10.1145/3433210.3453093},
	abstract = {Closely monitoring the behavior of a software system during its execution enables developers and analysts to observe, and ultimately understand, how it works. This kind of dynamic analysis can be instrumental to reverse engineering, vulnerability discovery, exploit development, and debugging. While these analyses are typically wellsupported for homogeneous desktop platforms (e.g., x86 desktop PCs), they can rarely be applied in the heterogeneous world of embedded systems. One approach to enable dynamic analyses of embedded systems is to move software stacks from physical systems into virtual environments that sufficiently model hardware behavior. This process which we call “rehosting” poses a significant research challenge with major implications for security analyses. Although rehosting has traditionally been an unscientific and ad-hoc endeavor undertaken by domain experts with varying time and resources at their disposal, researchers are beginning to address rehosting challenges systematically and in earnest. In this paper, we establish that emulation is insufficient to conduct large-scale dynamic analysis of real-world hardware systems and present rehosting as a firmwarecentric alternative. Furthermore, we taxonomize preliminary rehosting efforts, identify the fundamental components of the rehosting process, and propose directions for future research.},
	language = {en},
	urldate = {2023-02-21},
	booktitle = {Proceedings of the 2021 {ACM} {Asia} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {ACM},
	author = {Fasano, Andrew and Ballo, Tiemoko and Muench, Marius and Leek, Tim and Bulekov, Alexander and Dolan-Gavitt, Brendan and Egele, Manuel and Francillon, Aurélien and Lu, Long and Gregory, Nick and Balzarotti, Davide and Robertson, William},
	month = may,
	year = {2021},
	pages = {687--701},
}

@article{wright_challenges_2022,
	title = {Challenges in {Firmware} {Re}-{Hosting}, {Emulation}, and {Analysis}},
	volume = {54},
	issn = {0360-0300, 1557-7341},
	url = {https://dl.acm.org/doi/10.1145/3423167},
	doi = {10.1145/3423167},
	abstract = {System emulation and firmware re-hosting have become popular techniques to answer various security and performance related questions, such as determining whether a firmware contain security vulnerabilities or meet timing requirements when run on a specific hardware platform. While this motivation for emulation and binary analysis has previously been explored and reported, starting to either work or research in the field is difficult. To this end, we provide a comprehensive guide for the practitioner or system emulation researcher. We layout common challenges faced during firmware re-hosting, explaining successive steps and surveying common tools used to overcome these challenges. We provide classification techniques on five different axes, including emulator methods, system type, fidelity, emulator purpose, and control. These classifications and comparison criteria enable the practitioner to determine the appropriate tool for emulation. We use our classifications to categorize popular works in the field and present 28 common challenges faced when creating, emulating, and analyzing a system from obtaining firmwares to post emulation analysis.},
	language = {en},
	number = {1},
	urldate = {2023-02-21},
	journal = {ACM Computing Surveys},
	author = {Wright, Christopher and Moeglein, William A. and Bagchi, Saurabh and Kulkarni, Milind and Clements, Abraham A.},
	month = jan,
	year = {2022},
	pages = {1--36},
}

@misc{farrelly_ember-io_2023,
	title = {Ember-{IO}: {Effective} {Firmware} {Fuzzing} with {Model}-{Free} {Memory} {Mapped} {IO}},
	shorttitle = {Ember-{IO}},
	url = {http://arxiv.org/abs/2301.06689},
	abstract = {Exponential growth in embedded systems is driving the research imperative to develop fuzzers to automate firmware testing to uncover software bugs and security vulnerabilities. But, employing fuzzing techniques in this context present a uniquely challenging proposition; a key problem is the need to deal with the diverse and large number of peripheral communications in an automated testing framework. Recent fuzzing approaches: i) employ re-hosting methods by executing code in an emulator because fuzzing on resource limited embedded systems is slow and unscalable; and ii) integrate models of hardware behaviour to overcome the challenges faced by the massive input-space to be explored created by peripheral devices and to generate inputs that are effective in aiding a fuzzer to make progress.},
	language = {en},
	urldate = {2023-02-21},
	publisher = {arXiv},
	author = {Farrelly, Guy and Chesser, Michael and Ranasinghe, Damith C.},
	month = jan,
	year = {2023},
	note = {arXiv:2301.06689 [cs]},
	keywords = {Computer Science - Cryptography and Security},
}

@misc{noauthor__nodate,
	title = {© de los textos: sus autores. © de la edición: {Fundación} {Tecnalia} {Research} and {Innovation}. {I}.{S}.{B}.{N} : 978-84-88734-13-6 {Esta}},
	url = {http://scholar.googleusercontent.com/scholar?q=cache:AxgVvHDIF80J:scholar.google.com/&hl=en&as_sdt=4005&sciodt=0,6},
	urldate = {2023-02-21},
}

@inproceedings{muench_what_2018,
	address = {San Diego, CA},
	title = {What {You} {Corrupt} {Is} {Not} {What} {You} {Crash}: {Challenges} in {Fuzzing} {Embedded} {Devices}},
	isbn = {978-1-891562-49-5},
	shorttitle = {What {You} {Corrupt} {Is} {Not} {What} {You} {Crash}},
	url = {https://www.ndss-symposium.org/wp-content/uploads/2018/02/ndss2018_01A-4_Muench_paper.pdf},
	doi = {10.14722/ndss.2018.23166},
	abstract = {As networked embedded systems are becoming more ubiquitous, their security is becoming critical to our daily life. While manual or automated large scale analysis of those systems regularly uncover new vulnerabilities, the way those systems are analyzed follows often the same approaches used on desktop systems. More speciﬁcally, traditional testing approaches relies on observable crashes of a program, and binary instrumentation techniques are used to improve the detection of those faulty states.},
	language = {en},
	urldate = {2023-02-03},
	booktitle = {Proceedings 2018 {Network} and {Distributed} {System} {Security} {Symposium}},
	publisher = {Internet Society},
	author = {Muench, Marius and Stijohann, Jan and Kargl, Frank and Francillon, Aurelien and Balzarotti, Davide},
	year = {2018},
}

@article{gustafson_toward_nodate,
	title = {Toward the {Analysis} of {Embedded} {Firmware} through {Automated} {Re}-hosting},
	abstract = {The recent paradigm shift introduced by the Internet of Things (IoT) has brought embedded systems into focus as a target for both security analysts and malicious adversaries. Typiﬁed by their lack of standardized hardware, diverse software, and opaque functionality, IoT devices present unique challenges to security analysts due to the tight coupling between their ﬁrmware and the hardware for which it was designed. In order to take advantage of modern program analysis techniques, such as fuzzing or symbolic execution, with any kind of scale or depth, analysts must have the ability to execute ﬁrmware code in emulated (or virtualized) environments. However, these emulation environments are rarely available and are cumbersome to create through manual reverse engineering, greatly limiting the analysis of binary ﬁrmware. In this work, we explore the problem of ﬁrmware re-hosting, the process by which ﬁrmware is migrated from its original hardware environment into a virtualized one. We show that an approach capable of creating virtual, interactive environments in an automated manner is a necessity to enable ﬁrmware analysis at scale. We present the ﬁrst proof-of-concept system aiming to achieve this goal, called PRETENDER, which uses observations of the interactions between the original hardware and the ﬁrmware to automatically create models of peripherals, and allows for the execution of the ﬁrmware in a fully-emulated environment. Unlike previous approaches, these models are interactive, stateful, and transferable, meaning they are designed to allow the program to receive and process new input, a requirement of many analyses. We demonstrate our approach on multiple hardware platforms and ﬁrmware samples, and show that the models are ﬂexible enough to allow for virtualized code execution, the exploration of new code paths, and the identiﬁcation of security vulnerabilities.},
	language = {en},
	author = {Gustafson, Eric and Muench, Marius and Spensky, Chad and Redini, Nilo and Machiry, Aravind and Fratantonio, Yanick and Francillon, Aurélien and Balzarotti, Davide and Choe, Yung Ryn and Kruegel, Christopher and Vigna, Giovanni},
}

@misc{chen_metaemu_2022,
	title = {{MetaEmu}: {An} {Architecture} {Agnostic} {Rehosting} {Framework} for {Automotive} {Firmware}},
	shorttitle = {{MetaEmu}},
	url = {http://arxiv.org/abs/2208.03528},
	doi = {10.48550/arXiv.2208.03528},
	abstract = {In this paper we present MetaEmu, an architecture-agnostic emulator synthesizer geared towards rehosting and security analysis of automotive firmware. MetaEmu improves over existing rehosting environments in two ways: Firstly, it solves the hitherto open-problem of a lack of generic Virtual Execution Environments (VXEs) for rehosting by synthesizing processor simulators from Ghidra's language definitions. In doing so, MetaEmu can simulate any processor supported by a vast and growing library of open-source definitions. In MetaEmu, we use a specification-based approach to cover peripherals, execution models, and analyses, which allows our framework to be easily extended. Secondly, MetaEmu can rehost and analyze multiple targets, each of different architecture, simultaneously, and share analysis facts between each target's analysis environment, a technique we call inter-device analysis. We show that the flexibility afforded by our approach does not lead to a performance trade-off -- MetaEmu lifts rehosted firmware to an optimized intermediate representation, and provides performance comparable to existing emulation tools, such as Unicorn. Our evaluation spans five different architectures, bare-metal and RTOS-based firmware, and three kinds of automotive Electronic Control Unit (ECU) from four distinct vendors -- none of which can be rehosted or emulated by current tools, due to lack of processor support. Further, we show how MetaEmu enables a diverse set of analyses by implementing a fuzzer, a symbolic executor for solving peripheral access checks, a CAN ID reverse engineering tool, and an inter-device coverage tracker.},
	urldate = {2022-10-05},
	publisher = {arXiv},
	author = {Chen, Zitai and Thomas, Sam L. and Garcia, Flavio D.},
	month = aug,
	year = {2022},
	note = {arXiv:2208.03528 [cs]},
	keywords = {Computer Science - Cryptography and Security},
}

@inproceedings{scharnowski_fuzzware_2022,
	title = {Fuzzware: {Using} {Precise} \{{MMIO}\} {Modeling} for {Effective} {Firmware} {Fuzzing}},
	isbn = {978-1-939133-31-1},
	shorttitle = {Fuzzware},
	url = {https://www.usenix.org/conference/usenixsecurity22/presentation/scharnowski},
	language = {en},
	urldate = {2023-02-03},
	author = {Scharnowski, Tobias and Bars, Nils and Schloegel, Moritz and Gustafson, Eric and Muench, Marius and Vigna, Giovanni and Kruegel, Christopher and Holz, Thorsten and Abbasi, Ali},
	year = {2022},
	keywords = {to be scanned},
	pages = {1239--1256},
}

@inproceedings{kim_firmae_2020,
	address = {New York, NY, USA},
	series = {{ACSAC} '20},
	title = {{FirmAE}: {Towards} {Large}-{Scale} {Emulation} of {IoT} {Firmware} for {Dynamic} {Analysis}},
	isbn = {978-1-4503-8858-0},
	shorttitle = {{FirmAE}},
	url = {https://doi.org/10.1145/3427228.3427294},
	doi = {10.1145/3427228.3427294},
	abstract = {One approach to assess the security of embedded IoT devices is applying dynamic analysis such as fuzz testing to their firmware in scale. To this end, existing approaches aim to provide an emulation environment that mimics the behavior of real hardware/peripherals. Nonetheless, in practice, such approaches can emulate only a small fraction of firmware images. For example, Firmadyne, a state-of-the-art tool, can only run 183 (16.28\%) of 1,124 wireless router/IP-camera images that we collected from the top eight manufacturers. Such a low emulation success rate is caused by discrepancy in the real and emulated firmware execution environment. In this study, we analyzed the emulation failure cases in a large-scale dataset to figure out the causes of the low emulation rate. We found that widespread failure cases often avoided by simple heuristics despite having different root causes, significantly increasing the emulation success rate. Based on these findings, we propose a technique, arbitrated emulation, and we systematize several heuristics as arbitration techniques to address these failures. Our automated prototype, FirmAE, successfully ran 892 (79.36\%) of 1,124 firmware images, including web servers, which is significantly (≈ 4.8x) more images than that run by Firmadyne. Finally, by applying dynamic testing techniques on the emulated images, FirmAE could check 320 known vulnerabilities (306 more than Firmadyne), and also find 12 new 0-days in 23 devices.},
	urldate = {2022-10-13},
	booktitle = {Annual {Computer} {Security} {Applications} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Kim, Mingeun and Kim, Dongkwan and Kim, Eunsoo and Kim, Suryeon and Jang, Yeongjin and Kim, Yongdae},
	month = dec,
	year = {2020},
	keywords = {Firmware, dynamic analysis, embedded device, emulation},
	pages = {733--745},
}

@inproceedings{gao_vulseeker_2018,
	address = {New York, NY, USA},
	series = {{ASE} 2018},
	title = {{VulSeeker}: a semantic learning based vulnerability seeker for cross-platform binary},
	isbn = {978-1-4503-5937-5},
	shorttitle = {{VulSeeker}},
	url = {https://doi.org/10.1145/3238147.3240480},
	doi = {10.1145/3238147.3240480},
	abstract = {Code reuse improves software development efficiency, however, vulnerabilities can be introduced inadvertently. Many existing works compute the code similarity based on CFGs to determine whether a binary function contains a known vulnerability. Unfortunately, their performance in cross-platform binary search is challenged. This paper presents VulSeeker, a semantic learning based vulnerability seeker for cross-platform binary. Given a target function and a vulnerable function, VulSeeker first constructs the labeled semantic flow graphs and extracts basic block features as numerical vectors for both of them. Then the embedding vector of the whole binary function is generated by feeding the numerical vectors of basic blocks to the customized semantics aware DNN model. Finally, the similarity of the two binary functions is measured based on the Cosine distance. The experimental results show that VulSeeker outperforms the state-of-the-art approaches in terms of accuracy. For example, compared to the most recent and related work Gemini, VulSeeker finds 50.00\% more vulnerabilities in the top-10 candidates and 13.89\% more in the top-50 candidates, and improves the values of AUC and ACC for 8.23\% and 12.14\% respectively. The video is presented at https://youtu.be/Mw0mr84gpI8.},
	urldate = {2022-10-05},
	booktitle = {Proceedings of the 33rd {ACM}/{IEEE} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Gao, Jian and Yang, Xin and Fu, Ying and Jiang, Yu and Sun, Jiaguang},
	month = sep,
	year = {2018},
	keywords = {cross-platform binary, semantic learning, vulnerability search},
	pages = {896--899},
}

@misc{zhou_what_2022-1,
	title = {What {Your} {Firmware} {Tells} {You} {Is} {Not} {How} {You} {Should} {Emulate} {It}: {A} {Specification}-{Guided} {Approach} for {Firmware} {Emulation}},
	shorttitle = {What {Your} {Firmware} {Tells} {You} {Is} {Not} {How} {You} {Should} {Emulate} {It}},
	url = {http://arxiv.org/abs/2208.07833},
	doi = {10.48550/arXiv.2208.07833},
	abstract = {Emulating firmware of microcontrollers is challenging due to the lack of peripheral models. Existing work finds out how to respond to peripheral read operations by analyzing the target firmware. This is problematic because the firmware sometimes does not contain enough clues to support the emulation or even contains misleading information (e.g. buggy firmware). In this work, we propose a new approach that builds peripheral models from the peripheral specification. Using NLP, we translate peripheral behaviors in human language (documented in chip manuals) into a set of structured condition-action rules. By checking, executing, and chaining them at runtime, we can dynamically synthesize a peripheral model for each firmware execution. The extracted condition-action rules might not be complete or even be wrong. We, therefore, propose incorporating symbolic execution to quickly pinpoint the root cause. This assists us in the manual correction of the problematic rules. We have implemented our idea for five popular MCU boards spanning three different chip vendors. Using a new edit-distance-based algorithm to calculate trace differences, our evaluation against a large firmware corpus confirmed that our prototype achieves much higher fidelity compared with state-of-the-art solutions. Benefiting from the accurate emulation, our emulator effectively avoids false positives observed in existing fuzzing work. We also designed a new dynamic analysis method to perform driver code compliance checks against the specification. We found some non-compliance which we later confirmed to be bugs caused by race conditions.},
	urldate = {2022-10-05},
	publisher = {arXiv},
	author = {Zhou, Wei and Zhang, Lan and Guan, Le and Liu, Peng and Zhang, Yuqing},
	month = aug,
	year = {2022},
	note = {arXiv:2208.07833 [cs]},
	keywords = {Computer Science - Cryptography and Security},
}
